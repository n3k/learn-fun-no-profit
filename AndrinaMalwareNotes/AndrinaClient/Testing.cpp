#include "stdafx.h"
//#include "Nivdort.h"
#include "Testing.h"


void TestDecryptionPost(void) {
	//PASS
	DWORD key = 0xc46bd577;
	RECVKey = key;
	UCHAR *_local_decryptionBytes = (UCHAR *)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, 0x2000);
	GetDecryptionBytes(_local_decryptionBytes, EncryptedPostLen, FALSE);
	UCHAR *ptr = EncryptedPost;
	int i = 0;
	for (i = 0; i < EncryptedPostLen; i++) {
		printf("%02x ", ptr[i] ^ _local_decryptionBytes[i]);
	}
	HeapFree(GetProcessHeap(), 0, _local_decryptionBytes);
	HeapFree(GetProcessHeap(), 0, DecryptionBytes);
}

void TestDecryptionRecv(void) {
	//PASS
	DWORD key = 0x317b8737;
	RECVKey = CalculateDecryptionKey(key);
	UCHAR *_local_decryptionBytes = (UCHAR *)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, 0x2000);
	GetDecryptionBytes(_local_decryptionBytes, EncryptedRecvLen2, FALSE);
	UCHAR *ptr = EncryptedRecv2;
	int i = 0;
	for (i = 0; i < EncryptedRecvLen2; i++) {
		printf("%02x ", ptr[i] ^ _local_decryptionBytes[i]);
	}
	HeapFree(GetProcessHeap(), 0, _local_decryptionBytes);
	HeapFree(GetProcessHeap(), 0, DecryptionBytes);
}


void TestDoubleEncrptionMAPSRecv(void) {
	//Not Working yet
	DWORD key = 0xc46bd577;
	RECVKey = CalculateDecryptionKey(key);
	UCHAR *_local_decryptionBytes = (UCHAR *)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, 0x2000);
	UCHAR * MapsEncryptedBuff = (UCHAR *)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, EncryptedRecvLen);
	GetDecryptionBytes(_local_decryptionBytes, EncryptedRecvLen, FALSE);
	UCHAR *ptr = EncryptedRecv;
	int i = 0;
	for (i = 0; i < EncryptedRecvLen; i++) {
		MapsEncryptedBuff[i] = ptr[i] ^ _local_decryptionBytes[i];
	}
	// 'MAPS' =  0x4D415053
	key = 0x4D415053 ^ ((DWORD *)MapsEncryptedBuff)[1];
	RECVKey = key;
	GetDecryptionBytes(_local_decryptionBytes, EncryptedRecvLen, TRUE);
	unsigned int DataLength = key ^ ((DWORD *)MapsEncryptedBuff)[0];
	printf("Data Length: %08x\n", DataLength);
	ptr = MapsEncryptedBuff + 8;
	//for (i = 0; i < DataLength; i++) {
	//	printf("%02x ", ptr[i] ^ _local_decryptionBytes[i]);
	//}
	HeapFree(GetProcessHeap(), 0, _local_decryptionBytes);
	HeapFree(GetProcessHeap(), 0, DecryptionBytes);
	HeapFree(GetProcessHeap(), 0, MapsEncryptedBuff);
}

/*
void testDecryption(void) {
	_DecryptWithKey(key, len);

	printf("RecvKey: %08x\n", CalculateDecryptionKey(0x55509ed2));
	unsigned char *encryptionBlock = GenerateDecryptionBlock(0x5402db95, 1);
	printf("EncBytes: %02x %02x\n", encryptionBlock[0], encryptionBlock[1]);

	GlobalTableDecryption();

}*/

void TestDecryptionRecv3(void) {
	//PASS
	DWORD key = 0x8b758f5b;
	RECVKey = CalculateDecryptionKey(key);
	UCHAR *_local_decryptionBytes = (UCHAR *)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, 0x2000);
	GetDecryptionBytes(_local_decryptionBytes, sizeof(EncryptedRecv3), FALSE);
	UCHAR *ptr = EncryptedRecv3;
	int i = 0;
	for (i = 0; i < sizeof(EncryptedRecv3); i++) {
		printf("%02x ", ptr[i] ^ _local_decryptionBytes[i]);
	}
	HeapFree(GetProcessHeap(), 0, _local_decryptionBytes);
	HeapFree(GetProcessHeap(), 0, DecryptionBytes);
}

void TestDecryptionRecv4(void) {
	//PASS
	DWORD key = 0x8b758f5b;
	RECVKey = CalculateDecryptionKey(key);
	UCHAR *_local_decryptionBytes = (UCHAR *)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, 0x2000);
	GetDecryptionBytes(_local_decryptionBytes, sizeof(EncryptedRecv4), FALSE);
	UCHAR *ptr = EncryptedRecv4;
	int i = 0;
	for (i = 0; i < sizeof(EncryptedRecv4); i++) {
		printf("%02x ", ptr[i] ^ _local_decryptionBytes[i]);
	}
	HeapFree(GetProcessHeap(), 0, _local_decryptionBytes);
	HeapFree(GetProcessHeap(), 0, DecryptionBytes);
}

BOOL EncryptCommandForIP(DWORD key, char *ip, USHORT port) {
	// This function performs the encryption of the 0x13 command 
	// for the specified IP/PORT pair
	//PASS
	RECVKey = key;
	UCHAR *_local_decryptionBytes = (UCHAR *)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, 0x2000);
	GetDecryptionBytes(_local_decryptionBytes, 26, FALSE);
	
	UCHAR *ptr = GetIPListCommand;
	ptr += 18;
	*(DWORD *)ptr = inet_addr(ip);
	ptr += 4;
	*(WORD *)ptr = htons(port);
	ptr = GetIPListCommand;
	int i = 0;
	for (i = 0; i < 26; i++) {
		printf("%02x ", ptr[i]);
	}
	printf("\n");
	
	for (i = 0; i < 26; i++) {
		printf("%02x ", ptr[i] ^ _local_decryptionBytes[i]);
	}

	HeapFree(GetProcessHeap(), 0, _local_decryptionBytes);
	HeapFree(GetProcessHeap(), 0, DecryptionBytes);

	return TRUE;
}

void MainTesting(void) {
	//TestDecryptionByteFunction();
	TestDecryptionPost();
	//TestDecryptionRecv();
	//TestDoubleEncrptionMAPSRecv();
	//TestDecryptionRecv();
	//TestDecryptionRecv3();
	//ParseResult_GetIPs(IP_PORT_RecvResult);
	//EncryptCommandForIP(0x8b758f5b, "178.250.138.208", 20422);
	//TestDecryptionRecv4();
	
}
