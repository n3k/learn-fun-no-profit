import random
import string

max_bits = 32  # For fun, try 2, 17 or other arbitrary (positive!) values

def ROL(data, shift, size=32):
    shift %= size
    remains = data >> (size - shift)
    body = (data << shift) - (remains << size )
    return (body + remains)


def ROR(data, shift, size=32):
    shift %= size
    body = data >> shift
    remains = (data << (size - shift)) - (body << size)
    return (body + remains)

class Utils(object):

    @staticmethod
    def get_random_name(size):
        return ''.join(random.choice(string.letters + string.digits) for _ in range(size))

    @staticmethod
    def as_hex(data):
        return "".join(["{:02x}:".format(ord(c)) for c in data])

    @staticmethod
    def rol(val, r_bits, max_bits):
        return (val << r_bits%max_bits) & (2**max_bits-1) | ((val & (2**max_bits-1)) >> (max_bits-(r_bits%max_bits)))

    @staticmethod
    def ror(val, r_bits, max_bits):
        return ((val & (2**max_bits-1)) >> r_bits%max_bits) | (val << (max_bits-(r_bits%max_bits)) & (2**max_bits-1))


domain_strings = [
    'classwritten.net',
 'riskukuruzabio.ru',
 'blackratoon.cn',
 'osmanskayaagressiya.ru',
 'morningnature.net',
 'shenzhenmicroindustry.cn',
 'trademodern.net',
 'volshebstvosrednevekoviya.ru',
 'morningbicycle.net',
 'turetskiyaproblema.ru',
 'crazybots.org',
 'turkishproblem.ru',
 'funlazysocks.com',
 'netwonder.net',
 'thinkkitchen.net',
 'historycover.net',
 'japanesefactory.ru',
 'booksecure.ru',
 'yaponskiizavod.ru',
 'captainspecial.net',
 'ottomanagression.ru',
 'classforever.net',
 'tcourier.ru',
 'middleshout.net',
 'historyshore.net',
 'theadulthub.ru',
 'biocornrice.ru']


TABLE_IP_PORT = [
0x40,0x67,0x3b,0xcd,0x28,0x59,0xbc,0x25,0x8e,0xf7,0xdf,0x59,0xb9,0x59,0x8a,0xd9,
0x15,0x52,0xdc,0x4f,0xb6,0x50,0xb4,0x83,0x62,0x51,0x86,0x01,0x09,0xb0,0xdf,0xb0,
0x25,0x02,0x2b,0xad,0x0f,0x75,0xda,0xbb,0x1c,0xa4,0x51,0x6c,0xbd,0x8c,0x44,0xa0,
0xf9,0x32,0xfa,0xe7,0xce,0xc6,0x58,0x56,0xb9,0x92,0x7e,0x79,0x06,0x05,0x59,0x8a,
0x25,0x8b,0xf9,0x48,0x84,0x4c,0x08,0x8b,0xc3,0x02,0x32,0x9c,0x4e,0x8b,0x7f,0x57,
0x45,0xee,0xb8,0xae,0xb4,0xbd,0xf4,0x33,0x60,0x6d,0xda,0x59,0x78,0x65,0x40,0x77,
0xfa,0x5d,0xad,0x8c,0xc4,0x74,0xa7,0x3d,0xf6,0x02,0xd9,0x64,0xf0,0x58,0x94,0x24,
0x04,0x64,0x98,0x53,0x6e,0xcb,0x8d,0x68,0x6e,0xd5,0x25,0x05,0x4f,0xc0,0xe4,0x54,
0x5e,0x2d,0x59,0xc2,0x3f,0x2e,0x19,0x86,0x16,0x8c,0xc2,0x56,0x23,0xc5,0xf5,0x65,
0x7a,0xbc,0x02,0x0a,0x06,0xaf,0x2b,0xc8,0x7b,0x98,0x61,0x6c,0x22,0x5e,0xcd,0xa0,
0x35,0x8e,0x03,0x56,0x62,0x45,0x6a,0xa2,0x76,0x5a,0x4b,0xd7,0x8c,0xc0,0x8b,0x46,
0xc4,0x87,0x50,0xa2,0x1c,0x7a,0xa0,0x7b,0xad,0x8f,0xc5,0xbc,0x4e,0x76,0x34,0x5a,
0xcd,0x4e,0x79,0x82,0xbf,0x5c,0x93,0xc5,0x10,0xa0,0xd3,0x86,0xf6,0x57,0x47,0x40,
0x7f,0x75,0x42,0x62,0x46,0xde,0x99,0x51,0xba,0xd9,0xa5,0x04,0x89,0x67,0x86,0x59,
0x2d,0xa3,0x3f,0xc3,0xb0,0xbc,0x56,0x83,0x2d,0x71,0x3e,0x02,0x32,0x8e,0xab,0x57,
0xa5,0x6d,0x66,0x4f,0x1b,0x8d,0xb0,0x5d,0x9c,0x90,0xb1,0x76,0xfb,0x6d,0x63,0x8e,
0x06,0x4e,0xbb,0x6c,0x23,0x96,0xf3,0x60,0xfe,0x4a,0x41,0x40,0x19,0x58,0xd3,0xb0,
0x24,0xb1,0x13,0x64,0x1e,0x5e,0xc9,0x72,0x8a,0xac,0xde,0x59,0x82,0x14,0x0c,0xb6,
0x61,0x57,0x43,0xf5,0x08,0x83,0x5f,0x02,0x32,0xa2,0x0b,0x89,0x7c,0xba,0x78,0x23,
0x89,0xaa,0x65,0x4f,0x76,0x84,0xd5,0x58,0xf5,0x51,0x23,0xde,0x7c,0x7c,0x42,0x02,
0x32,0x89,0x41,0x6b,0xb9,0x54,0x6c,0x80,0x19,0x69,0xfc,0x5e,0x43,0xc8,0x93,0xa3,
0xc5,0x56,0x7f,0x11,0x0f,0xb2,0x78,0xbc,0x19,0x3b,0xe0,0x6b,0x22,0xb9,0x5f,0x49,
0xf6,0x6b,0xb9,0xb2,0xfa,0x8a,0xd0,0x4f,0xc6,0x4b,0x55,0xd3,0xea,0x79,0x58,0x59,
0x89,0xfc,0x1c,0xbd,0xc0,0x55,0x40,0x56,0x29,0xc9,0x19,0x67,0xff,0xe8,0x73,0xa2]

TABLE_IP_PORT2 = [ 0x58,0x32,0xfa,0xe7,0xd6,0xc6,0x58,
0x54,0x6c,0x80,0x19,0x69,0xfc,0x4a,0x41,0x40,0x19,0x58,0xd3,0xd5,0x89,0x73,0x47,
0xc9,0xb9,0x56,0x82,0x6d,0x7a,0xb0,0xdf,0xc8,0x1b,0xa2,0xe2,0xcc,0x06,0x6c,0xbd,
0x8c,0x44,0xa0,0xf9,0xb9,0x5f,0x49,0xf6,0x6b,0xb9,0x4f,0x76,0x84,0xd5,0x58,0xf5,
0x6d,0x7a,0x6f,0xdd,0xb2,0x6e,0x46,0x58,0x82,0xbe,0x50,0xff,0xb2,0xfa,0x8a,0xd0,
0x4f,0xc6,0x44,0x71,0xa8,0x52,0x79,0x6b,0x55,0xba,0x3e,0xa1,0x74,0xe3,0xb0,0x25,
0x02,0x2b,0xad,0x0f,0x6d,0x66,0x4f,0x1b,0x8d,0xb0,0x67,0xff,0xe8,0x73,0xa2,0xee,
0x05,0x6b,0xbd,0xbf,0xc9,0x3f,0x59,0x82,0x14,0x0c,0xb6,0x61,0x25,0x8e,0xf7,0xdf,
0x59,0xb9,0xc8,0x7b,0x98,0x61,0x6c,0x22,0xbc,0x19,0x3b,0xe0,0x6b,0x22,0x29,0xe6,
0x10,0xad,0x86,0xf6,0x1f,0x0b,0x6a,0x96,0x63,0x68,0x48,0x84,0x4c,0x08,0x8b,0xc3,
0x5e,0xc9,0x72,0x8a,0xac,0xde,0x4f,0x91,0x2a,0xfa,0x87,0x29,0xbd,0x95,0xc9,0x8a,
0x58,0xba,0x02,0x32,0xa2,0x0b,0x89,0x7c,0x75,0xda,0xbb,0x1c,0xa4,0x51,0x57,0x43,
0xf5,0x08,0x83,0x5f,0xd5,0xfe,0x87,0x4c,0x96,0xad,0x5e,0x43,0xc8,0x93,0xa3,0xc5,
0x25,0xb6,0x03,0xe9,0x8b,0xf9,0x5f,0x10,0x2d,0x90,0x5a,0xcd,0x4b,0x55,0xd3,0xea,
0x79,0x58,0x58,0x94,0x24,0x04,0x64,0x98,0x55,0x40,0xc3,0x01,0xc9,0x19,0x5f,0x4d,
0xc5,0xaf,0x83,0xc5,0x4e,0x79,0x82,0xbf,0x5c,0x93,0x5e,0xcd,0xa1,0x7f,0x8e,0x03,
0xd9,0xa5,0x04,0x89,0x67,0x86,0x59,0x2d,0xa3,0x3f,0xc3,0xb0,0x54,0x75,0x64,0x3e,
0xbe,0x6b,0x4f,0xb6,0x50,0xb4,0x83,0x62,0x02,0x32,0x9c,0x4e,0x8b,0x7f,0x59,0x78,
0x65,0x40,0x77,0xfa,0x47,0xec,0xc3,0xb2,0xa2,0x1c,0x6d,0x42,0x20,0x8b,0x87,0x69,
0x57,0x46,0x68,0x6b,0x75,0x42,0x5d,0x9c,0x90,0xb1,0x76,0xfb,0x6d,0x63,0x8e,0x06,
0x4e,0xbb,0xd4,0xb7,0xcb,0x87,0x97,0xab,0x02,0x32,0x89,0x41,0x6b,0xb9,0xbd,0xaf,
0x77,0x98,0xa3,0x86,0xba,0x78,0x23,0x89,0xaa,0x65,0xb0,0x24,0xb1,0x13,0x64,0x1e,
0xbd,0xf4,0x4a,0x20,0x6d,0xda,0x59,0x88,0x1c,0xdd,0xa2,0x54,0x67,0x3b,0xcd,0x7d,
0x59,0xbc,0x57,0x45,0xee,0xb8,0xae,0xb4,0x7a,0xa0,0x7b,0xad,0x8f,0xc5,0x54,0xe8,
0xe5,0xa5,0x71,0x7c,0x56,0x7f,0x11,0x0f,0xb2,0x78,0xbc,0xad,0x59,0x50,0x5e,0x54,
0x56,0xbf,0xd2,0x28,0x79,0x06,0x69,0xe3,0x18,0x77,0x62,0x21,0x5d,0xad,0x8c,0xc4,
0x74,0xa7,0x53,0x6e,0xcb,0x8d,0x68,0x6e,0x59,0x89,0xfc,0x1c,0xbd,0xc0,0xd5,0x25,
0x05,0x4f,0xc0,0xe4,0x5d,0xac,0xd9,0x64,0x52,0xdc,0x6c,0x23,0x96,0xf3,0x60,0xfe,
0x56,0x23,0xc5,0xf5,0x65,0x7a,0x2e,0x19,0x86,0x16,0x8c,0xc2,0x56,0x62,0x04,0xfa,
0x7a,0x05,0x02,0x32,0x8e,0xab,0x57,0xa5,0x5a,0x4b,0xd7,0x8c,0xc0,0x8b,0x54,0x5e,
0x2d,0x59,0xc2,0x3f,0x18,0x43,0x04,0x5b,0x8c,0x25,0x53,0x6e,0x9b,0x3c,0xc1,0x5b,
0x3d,0xf6,0x02,0xd9,0x64,0xf0,0x55,0x1e,0xad,0xc8,0x7c,0x42,0xbc,0x02,0x04,0x5c,
0xaf,0x2b,0xd4,0xfc,0x14,0xfd,0x5a,0xac,0x62,0x46,0xdd,0x2c,0x51,0xba,0x53,0x6e,
0x48,0xa9,0xa2,0x76,0xbc,0x56,0x83,0x2d,0x71,0x3e,0xaa,0x87,0x98,0xf5,0xd7,0x38,
0xfb,0xaa,0x28,0x5b,0x69,0xb2,0x16,0xcd,0xcf,0xe8,0xc2,0x68,0xc1,0xb6,0xfd,0xe2,
0x7f,0x2e,0x21,0x9d,0x5a,0x61,0xc9,0x1f,0xc4,0xed,0x73,0x30,0x04,0xb6,0x44,0xc0,
0xbf,0xc7,0x1e,0xa4,0xe6,0x0e,0x0a,0xcc,0x57,0xe8,0x3b,0x17,0x52,0xbd,0x81,0x0d,
0x57,0x9b,0xd6,0xcd,0xb6,0xe9,0xed,0x47,0x5c,0xad,0xa6,0xf2,0x5e,0x2d,0x5d,0xe6,
0xa3,0x19,0x76,0x37,0xf7,0x6a,0x78,0x0a,0xed,0xc9,0xaa,0x6f,0x81,0xc5,0x8a,0xe1,
0xce,0x61,0xac,0x1e,0x80,0x06,0x13,0xc7,0xeb,0x0e,0xbc,0xd9,0xbe,0x65,0x80,0x9b,
0xc7,0xb7,0x00,0x00,0x00,0x00,0x1a,0x1d,0x53,0xfa,0xf2,0x41,0x18,0xe7,0xaf,0xb3,
0xb3,0xe7,0x52,0xb7,0x9c,0x3f,0xa6,0x8c,0x2c,0x0a,0x8f,0x34,0x72,0xe8,0x78,0x06,
0x70,0x65,0xbb,0x6f,0x60,0x1b,0x25,0xad,0xc1,0xcd,0x00,0xc6,0xff,0xc4,0x53,0x5c,
0xc7,0x35,0x41,0xa1,0x6c,0x88,0xbf,0x12,0x9f,0xd6,0x4c,0x6e,0x10,0x0c,0xd3,0xaf,
0x91,0xe9,0xd4,0x26,0x34,0x6a,0x11,0x9f,0x93,0xe0,0x78,0x02,0x4d,0xe3,0x05,0x5b,
0xa0,0x89,0xe1,0x5c,0x7b,0x53,0x66,0xdc,0x0f,0xdf,0xff,0x57,0x64,0x25,0xe4,0x4c,
0x61,0x15,0xca,0x32,0x04,0x3d,0x0f,0x52,0x18,0xc2,0x1e,0xcc,0xb6,0x10,0x90,0xda,
0x40,0xc0,0x94,0x65,0xe2,0x6f,0x30,0xe1,0x6a,0x73,0xc5,0xdd,0x89,0xb8,0xa9,0xfa,
0x5b,0x73,0xf6,0x14,0x65,0x27,0x37,0x4a,0xa0,0x86,0x74,0x1a,0xa2,0x65,0x7b,0xf8,
0x42,0xa7,0xa5,0x17,0x1e,0x79,0x35,0x34,0xd7,0x29,0x09,0xa7,0x09,0xa1,0x69,0x8d,
0xc3,0x71,0xc8,0xfb,0x5c,0xdc,0x33,0x63,0x0f,0x22,0x45,0x5a,0x0b,0x65,0x91,0x26,
0xf1,0x9d,0x55,0xf1,0xf6,0x46,0xbd,0xa9,0xeb,0x69,0x67,0x87,0x5c,0xff,0x7e,0x7c,
0xff,0xb4,0xda,0x1a,0x4d,0x71,0x76,0xc8,0xee,0x4f,0x19,0x25,0x1e,0x22,0x8d,0xed,
0x95,0x64,0x62,0x94,0x46,0xc4,0x5d,0x9e,0x75,0x5b,0x93,0xdb,0x9c,0x09,0x2d,0xbb,
0xe9,0x14,0xb4,0x84,0xee,0xa7,0xcf,0x82,0xcd,0x54,0x45,0x58,0x8c,0xf9,0xda,0x49,
0xeb,0x71,0xd7,0x2a,0xd4,0xd5,0x16,0x0e,0x0c,0x50,0xfe,0x2b,0x9c,0xaf,0xad,0xde,
0x92,0xd4,0x9e,0xbf,0x9d,0x05,0x22,0x3f,0xba,0x41,0xa1,0xa5,0x0a,0x13,0xcf,0x06,
0x03,0x54,0x3a,0xfe,0xd2,0x4d,0xbe,0x16,0xdd,0x7c,0xca,0x55,0x3f,0x44,0xb8,0x61,
0x91,0x8b,0xbc,0xed,0xea,0x23,0x44,0x30,0x3d,0xb6,0xf8,0xf7,0x3d,0xa1,0xe5,0x6b,
0xa9,0x98,0xee,0xd1,0x5d,0xe6,0xaf,0x04,0xdd,0x83,0x79,0x55,0xdd,0x87,0x88,0xae,
0xe9,0xca,0xd8,0x49,0x9a,0x3c,0x31,0xe4,0xb3,0x2b,0xe2,0x96,0x72,0x72,0x16,0x12,
0x3c,0x63,0xc4,0xab,0x6a,0x00,0x5f,0xda,0x70,0x1b,0x30,0x91,0xcd,0x83,0x94,0xb6,
0x21,0x42,0xf9,0x99,0xc3,0xc8,0x9d,0x30,0x5b,0x6e,0xa1,0x95,0xee,0x74,0x48,0x39,
0x9d,0x5d,0xf6,0x8e,0x36,0x89,0xdb,0xfe,0x43,0xa7,0x8b,0x27,0x32,0x59,0x5a,0x5f,
0x97,0x65,0x3a,0xc6,0x7e,0xf8,0x60,0xc6,0x46,0x56,0xd4,0xbe,0xdb,0x13,0xf6,0xeb,
0x15,0x4d,0x1b,0xec,0x28,0xd0,0x85,0x23,0x73,0x82,0xe7,0x84,0x90,0x08,0x13,0x7f,
0x89,0x27,0x01,0x54,0x8a,0x0c,0xb3,0xa0,0xd7,0xcc,0x20,0x57,0x7b,0x1b,0x75,0xa0,
0x84,0x9a,0xe2,0x3d,0x16,0x50,0x7d,0x66,0xa8,0x16,0xaa,0xb5,0x9f,0xed,0x29,0x57,
0x28,0xb5,0x06,0x11,0xfc,0x94,0x0b,0x66,0xe1,0x39,0xf5,0xe7,0x0b,0x38,0x03,0x81,
0x29,0x0a,0xa3,0xd3,0xe3,0xa8,0x85,0x0d,0x07,0xad,0x16,0xac,0xf5,0x0c,0xd3,0x69,
0x31,0x80,0xea,0x34,0xde,0x5d,0x78,0xf6,0x66,0x5e,0x97,0x38,0xdf,0x5e,0x71,0xf5,
0x70,0x62,0xa2,0xb4,0x30,0xe0,0xcb,0x67,0x6d,0xda,0x6f,0x18,0x23,0x14,0x9e,0x69,
0x84,0x2b,0x90,0x51,0x7b,0xc2,0x6e,0x21,0xfa,0xe4,0x64,0x54,0x64,0x79,0x41,0xfc,
0xf3,0x69,0x99,0x2c,0xee,0x54,0xf2,0x58,0x3f,0xe7,0x3e,0xb7,0xa7,0x57,0x70,0xd3,
0x88,0x77,0x47,0x4d,0x41,0x99,0xec,0x29,0x0b,0xb4,0x52,0xfc,0x5d,0x81,0x48,0xa5,
0x7c,0xcd,0x71,0x41,0x8d,0x34,0xe7,0x13,0x75,0x14,0xc5,0x49,0xd0,0xa3,0xd4,0xad,
0xac,0x48,0xc9,0x50,0x79,0xfb,0x87,0x3f,0x16,0x24,0xc8,0x0e,0xcf,0xc7,0x1a,0x50,
0xfe,0xcc,0x6f,0x27,0xab,0x00,0x41,0x9f,0x86,0xa2,0xf8,0xd9,0x8b,0x92,0xe5,0x93,
0x7e,0xfa,0x09,0x72,0x73,0x2d,0xff,0xab,0x82,0x94,0x52,0xa5,0xd0,0x49,0xd5,0x69,
0xf4,0x22,0xbf,0xef,0x4f,0xed,0xb2,0xe6,0x15,0x11,0x38,0x66,0x8c,0xf0,0x9b,0xca,
0xcf,0x05,0x6a,0xf1,0x09,0x9f,0xa2,0x18,0xce,0x44,0x6d,0x8f,0x15,0x67,0xd9,0xe7,
0xfc,0xc9,0xa1,0xb7,0x43,0x3a,0x01,0x72,0x9a,0xd7,0x6b,0xe7,0xa6,0x19,0x2d,0xa6,
0x14,0x61,0x14,0x28,0x79,0x40,0x65,0x4c,0xba,0x8f,0xeb,0xac,0x08,0xc6,0x42,0x5c,
0xe4,0x21,0xf9,0xcd,0x2d,0x95,0x45,0xb6,0x14,0xc9,0xbe,0xd1,0xd3,0x0e,0xa2,0xeb,
0x95,0x8f,0xc5,0x76,0xc6,0xdc,0x1c,0x47,0x0f,0xb1,0x71,0x9d,0x78,0xff,0xb5,0xc4,
0x11,0x61,0x7e,0xec,0xb3,0x96,0xa6,0x88,0xeb,0xf1,0xc0,0x5f,0x8d,0x3c,0x9b,0xf0,
0x04,0x84,0x26,0xa5,0x90,0x9a,0x55,0xd3,0x40,0xae,0xe1,0xad,0xdc,0x15,0xe2,0x8b,
0x5f,0x71,0x7c,0xbe,0xbd,0xdf,0xc0,0xb4,0xa1,0xb6,0xd2,0x58,0xb6,0x8b,0x4c,0xa0,
0xdf,0x76,0x32,0xbe,0x8b,0x6d,0x15,0x41,0x94,0x78,0xb7,0xdd,0x0f,0x2f,0xfa,0xab,
0xda,0x5e,0xe7,0x12,0xd9,0x53,0xb5,0x31,0x96,0x19,0x4b,0xe9,0x6a,0x34,0xb4,0x08,
0xe7,0x1c,0xf5,0x9a,0x2d,0x1a,0xf9,0xa2,0xea,0x58,0x4a,0x24,0x2e,0x95,0xad,0xcb,
0x0d,0x59,0x6c,0x0f,0x00,0xdd,0x23,0x8f,0x33,0xed,0x6e,0xcb,0x91,0x0c,0x12,0xb9,
0x1c,0x6f,0x4b,0x38,0x0f,0xaf,0x66,0x77,0xfd,0xae,0x98,0xfe,0x64,0xc2,0xbd,0x9b,
0x9a,0x21,0xf6,0x6b,0xc8,0xc8,0xab,0x41,0x13,0xad,0x78,0xd9,0x7b,0x16,0x04,0x8c,
0xdf,0x79,0x5a,0xf9,0xdb,0xff,0xb7,0xff,0x22,0x0a,0x4c,0xbb,0x6e,0x87,0xf0,0x58,
0x2c,0xb0,0xd0,0x69,0x92,0x76,0x29,0xc5,0xb0,0x5d,0x3e,0xa5,0x1e,0xf1,0x38,0x40,
0x5f,0x28,0x38,0xa4,0xde,0x3b,0x34,0xb4,0xad,0x5f,0x73,0x24,0xf2,0x4b,0xf9,0x59,
0xaf,0x2b,0x33,0xd1,0xda,0x51,0x54,0x30,0x71,0xef,0xb1,0x98,0xf9,0x4c,0x66,0xd1,
0x0c,0xac,0x6b,0x11,0xba,0x84,0x3a,0xb2,0x21,0xc9,0x74,0x83,0x87,0x2e,0xed,0x1c,
0xbd,0x60,0xf4,0x00,0x01,0x8f,0xc3,0x4e,0x59,0x1c,0x5b,0x39,0xd5,0xda,0xb9,0xce,
0xdf,0xbe,0x78,0xe3,0x11,0x28,0x7f,0x8f,0x1a,0x77,0x03,0xc5,0x01,0x93,0xa5,0x87,
0x5e,0xd2,0x32,0x60,0xba,0xe2,0xfb,0x48,0xf5,0x7c,0x56,0x25,0x91,0x73,0x4b,0xfa,
0x3a,0xae,0xcf,0x4a,0x5f,0x0a,0x8f,0x4a,0x29,0xb0,0x9c,0x21,0x43,0x43,0x13,0x26,
0x0f,0x25,0xbf,0x9f,0x57,0xe5,0x28,0x52,0x5d,0x9b,0xde,0xca,0x7f,0xbb,0xcd,0xda,
0x77,0x7c,0xfc,0x4b,0x06,0x88 ]


def convert_ip(dword_ip):
    d = dword_ip & 0xFF;
    c = (dword_ip >> 8) & 0xFF;
    b = (dword_ip >> 16) & 0xFF;
    a = (dword_ip >> 24) & 0xFF;

    conv = "{3:d}.{2:d}.{1:d}.{0:d}".format( a, b, c, d)
    return conv

"""
def list_ip_and_ports():
    print "Table Length: %02x" % TABLE_IP_PORT[0]
    i = 1
    while i < TABLE_IP_PORT[0]:
        ip_dword = (TABLE_IP_PORT[i+3]<<24) + (TABLE_IP_PORT[i+2]<<16) + (TABLE_IP_PORT[i+1]<<8) + TABLE_IP_PORT[i]
        port = (TABLE_IP_PORT[i+4]<<8) + TABLE_IP_PORT[i+5]
        print "%s : %d" % (convert_ip(ip_dword), port)
        i += 6

"""

def list_ip_and_ports():
    print "Table Length: %02x" % TABLE_IP_PORT2[0]
    i = 0
    try:
        while i < TABLE_IP_PORT2[0]:
            index = i * 3
            index = index * 2 + 1
            ip_dword = (TABLE_IP_PORT2[index+3]<<24) + (TABLE_IP_PORT2[index+2]<<16) + (TABLE_IP_PORT2[index+1]<<8) + TABLE_IP_PORT2[index]
            port = (TABLE_IP_PORT2[index+4]<<8) + TABLE_IP_PORT2[index+5]
            print "%s : %d" % (convert_ip(ip_dword), port)
            #print "%s : %d    --  %02x %02x %02x %02x"% (convert_ip(ip_dword), port, TABLE_IP_PORT2[index], TABLE_IP_PORT2[index+1], TABLE_IP_PORT2[index+2], TABLE_IP_PORT2[index+3])
            i += 1
    except:
        pass

class NikeObject(object):

    def __init__(self):
        self.vtable = None
        self.VaporArray = []
        self.SizeInBytesOfVaporArray = 0
        self.ready = False
        self.RealLength = 0 # The actual bufferSize allocated for the array

class VaporObject(object):
    def __init__(self):
        self.vtable = None
        self.buffer = None
        self.bufferSize1 = None
        self.ready = False
        self.bufferSize = 0
        self.SizeOfOriginalBuffer = 0
        self.EncryptionDword = None

"""
// Has a size of 0x2024
typedef struct _connection_block {
	size_t SendEncryptionBlockSize;
	DWORD SendEncryptionKey	;
	CHAR *SEND_ENCRYPTION_BLOCK[0x1000];
	+0x100C size_t RecvEncryptionBlockSize;
	+0x1010 DWORD RecvEncrptionKey; // encrypt_decrypt_key(EncryptionKey1)
	+0x1014 CHAR *RECV_ENCRYPTION_BLOCK[0x1000];
	+0x2018 function generate_encryption_decryption_table_in_connection_buffer_at_offset sub_402260
	+0x201C function encrypt_decrypt_key sub_423090
	+0x2020 socket
} connection_block;
"""

class EncryptionAndrina(object):

    def __init__(self):
        self.vapor_encrypted = []

    @classmethod
    def replace_byte(cls, dword, byte, pos):
            if pos == 0:
                r = 0xFFFFFF00
            elif pos == 1:
                r = 0xFFFF00FF
            elif pos == 2:
                r = 0xFF00FFFF
            elif pos == 3:
                r = 0x00FFFFFF
            result = dword & r
            result = result | (byte<<pos*8)
            return result

    def CipherStream(self, encryption_seed=0xf565a2e3):
        """
        value = rol 6
        2 byte = 3 byte + 2 byte
        3 byte = 3 Byte + 2 byte
        """
        print hex(encryption_seed)
        a = encryption_seed
        while True:
            a = Utils.rol(a, 6, 32)
            second_byte = (a & 0xff00)>>8
            third_byte = (a & 0xff0000)>>16
            second_byte = second_byte + third_byte
            a = self.replace_byte(a, second_byte, 1)
            third_byte = second_byte + third_byte
            a = self.replace_byte(a, third_byte, 2)
            yield a

    def encrypt_key1(self, key):
        key = ROL(key, 0x1f, 32)
        key[1] = key[0] + key[1]
        key[0] = key[0] + key[1]

    def encrypt_decrypt_key(self, key):
        key = ROL(key,0x06,32)
        key[1] = key[2] + key[1]
        key[2] = key[2] + key[1]


    def EncryptDomains(self):

        for domain in domain_strings:
            vapor = VaporObject()
            vapor.EncryptionDword = Utils.get_random_name(4)
            if len(domain)%4 != 0:
                padded_domain = domain + "\x00"*(4 - len(domain)%4)
            else:
                padded_domain = domain
            #print repr(padded_domain)
            encryption_dword = 0
            for _ in xrange(4):
                byte = ord(vapor.EncryptionDword[_])
                encryption_dword += byte<<(8*_)
            print hex(encryption_dword)
            vapor.EncryptionDword = encryption_dword
            buf = ""
            for i in xrange(0, len(padded_domain), 4):
                dword = padded_domain[i:i+4]
                buf += "".join([chr(ord(dword[_]) ^ ord(str(encryption_dword)[_])) for _ in xrange(4)])

            second_byte = (encryption_dword & 0xff00)>>8
            third_byte = (encryption_dword & 0xff0000)>>16
            third_byte = second_byte + third_byte
            encryption_dword = self.replace_byte(encryption_dword, third_byte, 2)
            third_byte = (encryption_dword & 0xff0000)>>16
            second_byte = second_byte + third_byte
            encryption_dword = self.replace_byte(encryption_dword, second_byte, 1)

            print Utils.as_hex(buf)
            vapor.buffer = buf
            self.vapor_encrypted.append(vapor)

    def decryptDomains(self):
        for vapor in self.vapor_encrypted:
            buf = ""
            encryption_dword = vapor.EncryptionDword
            for i in xrange(0, len(vapor.buffer), 4):
                dword = vapor.buffer[i:i+4]
                buf += "".join([chr(ord(dword[_]) ^ ord(str(encryption_dword)[_])) for _ in xrange(4)])

            second_byte = (encryption_dword & 0xff00)>>8
            third_byte = (encryption_dword & 0xff0000)>>16
            third_byte = second_byte + third_byte
            encryption_dword = self.replace_byte(encryption_dword, third_byte, 2)
            third_byte = (encryption_dword & 0xff0000)>>16
            second_byte = second_byte + third_byte
            encryption_dword = self.replace_byte(encryption_dword, second_byte, 1)
            print buf

    def decrypt_buffer(self, key, buffer):
        encryption_dword = key
        buf = ""
        if len(buffer)%4 != 0:
            padded_buffer = buffer + "\x00"*(4 - len(buffer)%4)
        else:
            padded_buffer = buffer
        for i in xrange(0, len(padded_buffer), 4):
            dword = padded_buffer[i:i+4]
            for _ in xrange(4):
                cur = (encryption_dword>>8*(_%4)) & 0xFF
                buf += chr(ord(dword[_]) ^ cur)

            #encryption_dword = Utils.rol(encryption_dword, 0x1d, max_bits)
            encryption_dword = ROL(encryption_dword, 0x1d, 32)

            second_byte = (encryption_dword>>8) & 0xff
            third_byte = (encryption_dword>>16) & 0xff
            third_byte = second_byte + third_byte
            encryption_dword = self.replace_byte(encryption_dword, third_byte, 2)
            second_byte = (encryption_dword>>8) & 0xff
            third_byte = (encryption_dword>>16) & 0xff
            second_byte = second_byte + third_byte
            encryption_dword = self.replace_byte(encryption_dword, second_byte, 1)

        return buf



import socket
def connect_to_c2():
    s = socket.socket()

    s.connect(("84.108.128.25", 27132))


    data = "\x5b\x8f\x75\x8b\x20\xf0\x90\xbd"
    data += "\x48"
    data += "\x8d\x75"
    data += "\x98\xe2"
    data += "\x2a\x9c\xdd\xb7\x86\x94\x67\xd9\xc9\xef\xe5\x79\xaa\x2e\x81\xd4\x58\xfd\x21"
    data += "\xb9\xb9"

    s.send(data)

    print Utils.as_hex(s.recv(0x2))
    print Utils.as_hex(s.recv(0x1000))
    s.close()

if __name__ == "__main__":
    a = EncryptionAndrina()
    #a.EncryptDomains()
    #a.decryptDomains()

    # This is put into GlobalVapor
    key=0x1f7b748e
    buf = ""
    buf += "\xef\x46\x1f\x77\xf2\xa6\x6c\xab\x10\xb0\x76\x79\xf4\x57\xa6\x3e"
    buf += "\x0f\x82\xef\xa2\x48\xf9\x43\xf3\x07\x4e\xd7\x24\x6f\x8e\x8a\xd0"
    buf += "\xe3\xce\x06\xef\x53\x27\x93\x5f\x62\x00\x1f\x7f\x02\x4d\xa5\xa9"
    buf += "\xc9\xa2\xca\x74\x50\x50\x4e\xc9\x87\x4a\xad\xd9\x9d\x27\xc8\xb9"
    buf += "\x7d\xb8\x1b\xe9\xaf\x2b\x9f\xc7\x86\x98\xcd\x2a\x6e\x76\x5f\xde"
    buf += "\x8e\x77\xdb\x07\x5a\x4f\x2f\x94\xee\xed\xeb\x71\x70\x4c\x80\x89"
    buf += "\x78\xd6\x43\xc9\xc7\x8d\xf6\x26\x77\x9c\xd4\xe0\xa6\xbb\xcb\xe7"
    buf += "\xfa\x5b\x71\x18\x31\x45\xea\x64\x10\x08\xbb\x35\x7d\x7b\x14\x1d"
    buf += "\x4c\x8e\x64\x66\x55\xba\xbc\xc2\x95\x00\x2b\x62\x1b\xb6\xf3\x6c"
    buf += "\x35\x9f\x53\x46\xe9\x19\x6d\x95\xf5\xa0\x37\xe9\x2b\x5e\x04\x45"
    buf += "\x87\x2f\x63\x2a\x5a\x2d\xcb\xf9\x84\xc9\x2f\x55\xdf\xc0\x21\x9e"
    buf += "\xde\x41\x92\xc4\x41\x76\x55\x07\x30\xe1\xe8\x00\xda\x95\xa6\x18"
    buf += "\x9f\x3e\x65\xcf\x28\x22\xdd\x7b\x62\x8d\xc1\x31\x74\x78\xa0\xdd"
    buf += "\x09\x18\x78\xc4\xe5\x87\x1c\xd3\xf6\xff\x03\x7b\x4f\x81\x2b\x90"
    buf += "\x2c\xbc\x74\xe7\x36\x56\x11\x36\x03\x5c\xf9\xb8\x50\x23\x37\x82"
    buf += "\xac\x8e\xba\x5d\x05\x6b\x36\x4b\x71\x97\xb2\xb6\x28\x63\x86\x18"
    buf += "\x82\x58\xce\x9c\xda\xcd\x77\xa4\x7e\x08\x1e\x47\xe4\x93\x22\x0a"
    buf += "\53\x99\xb1\xa4"
    #0x5d889b31

    #print a.decrypt_buffer(key=0x5d889b31, buffer="\x52\xf7\xe9\x2e\x15\xa0\xb6\x42\x98\xd8\x77\xab\xb3\x22\x92\xec")
    #print a.decrypt_buffer(key=0xec969e09, buffer="\x7b\xf7\xe5\x87\xb4\x53\x10\x4f\x6d\x80\x32\x45\x2a\x87\x47\x76\x7d")
    #print a.decrypt_buffer(key=0x2adf52b6, buffer="\xc0\x3d\xb3\x59\x3e\x4a\x27\xb6\x9e\x84\x22\xab\x2f\xe0\xa3\x35\xce\x2e\x0d\xc0\x7a\xf5\x11\x0c\x03\xe1\xcd\xdb")

    #print repr(a.decrypt_buffer(key=key, buffer=buf))

    list_ip_and_ports()

    #cipherStream = a.CipherStream(encryption_seed=0x8b758f5b)
    #print hex(cipherStream.next() ^  0x13)