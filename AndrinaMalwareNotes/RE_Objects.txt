//Has a size of 0x14
typedef struct _NikeObject { 
    PVOID nike_vtable;
	union {
		PVOID Buffer;
		PVapor vaporObjects;
	}    
	size_t	ContentSize;
	unsigned int ready;
	union {
		size_t BufferSize; // This dictates the actual buffer length of vaporObjects array
		DWORD TypeObject; // -> a value 1 here is for Objects that will hold a plaintext String
	}
} NikeObject;

typedef struct _DoubleNike {
	NikeObject nike1;
	NikeObject nike2;
} DoubleNike;


typedef struct _Vapor { // Size 0x1C
    PVOID vapor_vtable;
	PVOID buffer;
    void unknown;  // initialized to 0
	unsigned int ready;
	unsigned int	buffer_size;
	size_t SizeOfOriginalBuffer //the size of the string stored in the original buffer
	DWORD RandomDword
} Vapor;


typedef struct _RequestAllocation {
	// This is all like a header
	size_t sizeOfRequestAllocation;
	DWORD unknown // initialized to 0
	size_t sizeOfData // strlen('/index.php?isp2p')
	unsigned char unk; //Initialized to 2
	// At this point the data starts
	char *data[]
}


def encrypt_key1(key):
	key = ROL(key, 0x1f, 32)
	key[1] = key[0] + key[1]
	key[0] = key[0] + key[1]

def CalculateRecvDecryptionKey(key):
	key = ROL(key,0x06,32)
	key[1] = key[2] + key[1]
	key[2] = key[2] + key[1]



typedef struct _CipherStream {
	DWORD NumberOfUsableCipherBytes; //Expressed in bytes, not DWORDS
	DWORD EncryptionKey	;		
	CHAR ENCRYPTION_BLOCK[0x1000];	
} CipherStream;

// Has a size of 0x2024
typedef struct _connection_block {
	CipherStream SendCipherStream;
	CipherStream RecvCipherStream;	
	+0x2018 function generate_encryption_decryption_table_in_connection_buffer_at_offset sub_402260
	+0x201C function CalculateRecvDecryptionKey sub_423090
	+0x2020 socket
} connection_block;


//Size = 0x9C
// The vodo object has binary data from the GlobalTable in reverse order
typedef struct _vodo_object {
	DWORD UNK0
	size_t BinaryDataLength // It should represent the size of the overall object or similar
	DATAOFFSET
		+0 VodoType ( 1 indicates unsigned, different indicates signed)
		+4 size_t BufferSizeInDwords
		+8 PVOID Buffer
				Buffer[0] = SomeByteSize....
	EXTRA_DATAOFFSET
		+0 VodoType ( 1 indicates unsigned, different indicates signed)
		+4 size_t BufferSizeInDwords
		+8 PVOID Buffer
				Buffer[0] = SomeByteSize.... But it could be negative.. its weird
}

// Size = 0xEC
typedef struct _RashObject {
	int RemanentDataSize //Initialized to 0
	int unk2              // Initialized to 0
	char other_globalBinarydata[0x20]; // GLobalData[0x25E3:0x25E3+0x21]
	//0x28 char bufferRecvBytes[]; // BytesFromRecvBuffer
}


typedef struct _BowObject {
	struct NikeObject nikeOb1;
	struct NikeObject nikeOb2;
	struct NikeObject nikeOb3;
	DWORD unknown;
	struct NikeObject nikeOb4;
	struct NikeObject nikeOb5;
} BowObject;


typedef struct _ThreadContext {
	RTL_CRITICAL_SECTION //size 0x14
	+0x18 DWORD Counter // Initialized to 0 / This is guarded by the CritialSection
	+0x1C DWORD UNK2 // Initialized to 0
	+0X20 GetSystemTimeAsFile>>9; //SEED for the DGA
	+0X24 GetSystemTimeAsFile>>9 + 0x200;
	+0x28 DWORD UNK3 // Initialized to 0
	+0x2C void *globalBinaryData; // BinaryData_Global DecryptString(0x4912, 0x908)
	+0x30 void *ptr_names; // All the names that are going to be used in the DGA DecryptString(0x17F3, 0xAF1)
	+0x34 WORD **indexes_into_names; // these are used to index ptr_names / BinaryData_Global DecryptString(0x2020, 0x31E)
	+0x38 char string[0x14]; //Iinitialized to '.ru'
	+0x4C char string[0x14]; //Iinitialized to '.net'	
	+0x60 char string[0x20]; //Initialized to '/index.php
	+0x80 NikeObject nike_Result_Of_SuperSendRecv;
}

RecvData Format:

[dwLowDateTime, dwHighDateTime, NumOfObjects
